<!-- This file is to create a Gazebo and a Rviz windows, and control the car using GUI -->
<!-- <?xml version="1.0"?> -->
<launch>

    <arg name="x" default="0.0"/>
    <arg name="y" default="0.0"/>
    <arg name="z" default="0.0" />
    <arg name="roll" default="0.0"/>
    <arg name="pitch" default="0.0"/>
    <arg name="yaw" default="0.0"/>

    <!-- Gazebo  -->
   <!-- Load the surrounding environment into Gazebo -->
    <arg name="world" default="$(find sim_test)/world/xzk5.world"/> 
    <include file="$(find gazebo_ros)/launch/empty_world.launch" >
        <!--<arg name="world_name" value="$(arg world)"/>-->
    </include>

          <!-- Load the robot description -->
        <!-- <param name="robot_description" textfile="$(find test9)/urdf/sensor_test91.urdf" /> -->
        <param name="robot_description" command="$(find xacro)/xacro $(find test9)/urdf/xacro/mycar.xacro" />

        <!-- Load ros_controllers configuration parameters -->
        <rosparam file="$(find sim_test)/config/ctrl_ackermann_steering_controller.yaml" command="load"   />
        <rosparam file="$(find sim_test)/config/ctrl_gains.yaml" command="load"   />
        <rosparam file="$(find sim_test)/config/ctrl_joint_state_publisher.yaml" command="load"   />
        <rosparam file="$(find sim_test)/config/ctrl_steer_bot_hardware_gazebo.yaml" command="load"   />

        <!-- Spawn the controllers -->
        <node pkg="controller_manager" type="spawner" name="controller_spawner"  args="joint_state_publisher ackermann_steering_controller" output="screen" respawn="false" />

        <!-- Launch  the robot state publisher -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
            <param name="publish_frequency" value="50.0"/>
        </node>
        <!-- <node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_publisher"/>
        <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher"/> -->

        <!-- Launch a rqt steering GUI for publishing to /steer_bot/steer_drive_controller/cmd_vel -->
        <node pkg="rqt_robot_steering" type="rqt_robot_steering" name="rqt_robot_steering" >
        <param name="default_topic" value="ackermann_steering_controller/cmd_vel"/>                         <!-- default velocity control topic name -->
        <param name="default_vx_max" value="2.1"/>                        <!-- linear velocity max value    m/s -->
        <param name="default_vx_min" value="-2.1"/>                       <!-- linear velocity min value    m/s-->
        <param name="default_vw_max" value="0.69"/>                    <!-- angular velocity max value  rad/s (adaptor for urdf joint limit) -->
        <param name="default_vw_min" value="-0.69"/>                   <!-- angular velocity min value  rad/s (adaptor for urdf joint limit) -->
        </node>

    <!-- Start the Gazebo node and configure the location and posture of the accident when the model is loaded -->
    <node pkg="gazebo_ros" type="spawn_model" name="model" args="-urdf -model mycar -param robot_description -gazebo_namespace /gazebo 
              -x $(arg x) -y $(arg y) -z $(arg z)
              -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"
          respawn="false" output="screen" />
    <!-- <node pkg="gazebo_ros" type="spawn_model" name="model" args="-urdf -model mycar -param robot_description"  /> -->
    <!-- ******************************************************************************************************************************************* -->

</launch>

